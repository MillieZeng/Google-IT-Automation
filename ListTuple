#list
fruits = ["Apple","banana","orange","melon"]
fruits.append("kiwi")
fruits.insert(0,"pineapple")
fruits.insert(25,"peach")----will append in the end
fruits.remove("melon")
fruits.pop(3)
print(fruits)----will remove the one that was popped
fruits[2]="strawberry"
print(fruits)----will change the third one into stawberry

#tuple
def convert_seconds(seconds):
  hours = seconds//3600
  minutes = (seconds-hours*3600)//60
  seconds = seconds - hours*3600 - minutes*60
  return hours,minutes,seconds
  
result = convert_seconds(5000)

type(result)----<class 'tuple'>
print(result)----(1,23,20)

#split tuple into 3 separate elements
hours,minutes,seconds = result
print(hours,minutes,seconds)----1 23 20
hours,minutes,seconds = convert_seconds(1000)
print(hours,minutes,seconds)----0 16 40

#Let's use tuples to store information about a file: its name, its type and its size in bytes. 
#Fill in the gaps in this code to return the size in kilobytes (a kilobyte is 1024 bytes) up to 2 decimal places.
def file_size(file_info):
	file_name,file_type, file_size= file_info
	return("{:.2f}".format(file_info[2] / 1024))

print(file_size(('Class Assignment', 'docx', 17875))) # Should print 17.46
print(file_size(('Notes', 'txt', 496))) # Should print 0.48
print(file_size(('Program', 'py', 1239))) # Should print 1.21

#iterating over lists and tuples
animals = ["monkey","lion","tiger","zebra"]
chars = 0
for animal in animals:
	chars += len(animal)
print("total characters: {}, average: {}".format(chars, chars/len(animals))) 

#print name&email in a list
def full_email(person):
	result = []
	for email, name in person:
		result.append("{} <{}>".format(name, email))
	return result
print(full_email([("milliez0606@gmail.com","Millie"),("bruceh@gmail.com","Bruce")]))

#creating a list by <append>-------in one line
multiples = []                --------
for x in range(1,11):         --------
	multiples.append(x*7) -------- multiples = [x*7 for x in range(1,11)]
print(multiples)

#in one line
languages = ["Python", "Java", "Perl", "C++", "R"]
length = [len(language) for language in languages]
print(length)

z = [x for x in range(0,101) if x%3 == 0]
print(z)


##Lists and Tuples Operations Cheat Sheet
Lists and tuples are both sequences, so they share a number of sequence operations. But, because lists are mutable, there are also a number of methods specific just to lists. This cheat sheet gives you a run down of the common operations first, and the list-specific operations second.

Common sequence operations
len(sequence) Returns the length of the sequence
for element in sequence Iterates over each element in the sequence
if element in sequence Checks whether the element is part of the sequence
sequence[i] Accesses the element at index i of the sequence, starting at zero
sequence[i:j] Accesses a slice starting at index i, ending at index j-1. If i is omitted, it's 0 by default. If j is omitted, it's len(sequence) by default.
for index, element in enumerate(sequence) Iterates over both the indexes and the elements in the sequence at the same time
Check out the official documentation for sequence operations.

List-specific operations and methods
list[i] = x Replaces the element at index i with x
list.append(x) Inserts x at the end of the list
list.insert(i, x) Inserts x at index i
list.pop(i) Returns the element a index i, also removing it from the list. If i is omitted, the last element is returned and removed.
list.remove(x) Removes the first occurrence of x in the list
list.sort() Sorts the items in the list
list.reverse() Reverses the order of items of the list
list.clear() Removes all the items of the list
list.copy() Creates a copy of the list
list.extend(other_list) Appends all the elements of other_list at the end of list
Most of these methods come from the fact that lists are mutable sequences. For more info, see the official documentation for mutable sequences and the list specific documentation.

List comprehension
[expression for variable in sequence] Creates a new list based on the given sequence. Each element is the result of the given expression.
[expression for variable in sequence if condition] Creates a new list based on the given sequence. Each element is the result of the given expression; elements only get added if the condition is true.
